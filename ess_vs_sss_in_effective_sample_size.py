# %% imports
import dill
import functools as ft
import matplotlib.pyplot as plt
import numpy as np
import sys
import time

np.random.seed(1000)
# %% functions
def pi(x):
    """Calculate value of the density at the point x."""
    norm_x = np.linalg.norm(x)
    return np.exp(-norm_x - 0.5 * norm_x**2)

def pi2(x, y):
    """Basically pi(x) / pi(y)."""
    norm_x = np.linalg.norm(x)
    norm_y = np.linalg.norm(y)
    return np.exp(-norm_x + norm_y + 0.5*(-norm_x**2  + norm_y**2))

# global constant for acceptance_rates
# ACCEPTANCE_RATES = list()

def random_MH(x0=[0], steps=10):
    """
    Perform the Metropolis-Hasting algorithm w.r.t. to the density pi
    given number of steps starting from x0.
    """
    d = len(x0)
    # acceptance_rates = np.zeros((steps,))
    for i in range(steps):
        # standard version:
        x1 = x0 + np.random.normal(scale=0.3, size=d)
        x0 = x1 if np.random.uniform() < pi2(x1, x0) else x0

        # version with the global constant:
        # ACCEPTANCE_RATES.append(pi2(x1, x0))
        # x0 = x1 if np.random.uniform() < ACCEPTANCE_RATES[-1] else x0

        # version with the local constant:
        # acceptance_rates[i] = pi2(x1, x0)
        # x0 = x1 if np.random.uniform() < acceptance_rates[i] else x0
    # print("Average acceptance rate =", np.mean(acceptance_rates))
    return x0

def runiform_ball(d, R=1):
    """
    Sample efficiently from a uniform distribution on a d-dimensional ball
    of radius R.
    """
    if R < 0: sys.exit("ERROR in runiform_ball: R must be nonnegative")
    x = np.random.normal(size=d)
    u = np.random.uniform()
    return R * u**(1 / d) * x / np.linalg.norm(x)

def random_SSS(x0=[0], steps=10):
    """
    Perform the Simple Slice Sacpler algorithm w.r.t. to the density pi
    given number of steps starting from x0.
    """
    for i in range(steps):
        t = np.random.uniform(0, pi(x0))
        x0 = runiform_ball(len(x0), -1 + np.sqrt(1 - 2*np.log(t)))
    return x0

def random_two_segments(left_border, right_border, shift=np.pi):
    """
    Sample from a uniform distribution on a union of two swgments:
    [left_border, right_border] and [left_border + shift, right_border + shift]
    """
    if left_border > right_border:
        sys.exit("ERROR in random_two_segments: left_border must be smaller than right_border")
    x = np.random.uniform(left_border, right_border)
    return x + shift if np.random.binomial(1, 0.5) == 1 else x

def ellipse_point(x1, x2, angle):
    """Return a point on the ellipse generated by x1 and x2 with the angle a."""
    if not len(x1) == len(x2):
        sys.exit("ERROR in ellipse_point: lengths of x1 and x2 must be equal")
    return(x1 * np.cos(angle) + x2 * np.sin(angle))

def random_ESS(x0=[0], steps=10):
    """
    Perform the Elliptical Slice Sacpler algorithm w.r.t. to the density pi
    given number of steps starting from x0.
    """
    for i in range(steps):
        norm_x0 = np.linalg.norm(x0)
        t = np.random.uniform(0, np.exp(-norm_x0))
        w = np.random.normal(size=len(x0))
        norm_w = np.linalg.norm(w)

        Ax = norm_x0**2 - norm_w**2
        Bx = 2 * np.sum(x0 * w)
        Cx = 2 * np.log(t)**2 - norm_x0**2 - norm_w**2

        phi = np.sign(Bx) * np.arccos(Ax / np.sqrt(Ax**2 + Bx**2))
        psi = np.arccos(min(1, Cx / np.sqrt(Ax**2 + Bx**2)))

        theta = random_two_segments((phi + psi) / 2, np.pi + (phi - psi) / 2)

        x0 = ellipse_point(x0, w, theta)
    return x0

def rho(x):
    """Basically normalized pi for d = 1."""
    return (np.exp(-abs(x) - 0.5 * x**2)) / 1.31136

def sample_wrt_algorithm(algorithm, x0, burn_in=10, size=1, print_CPU_time=True):
    """Sample w.r.t. the algorithm staring from x0."""
    if print_CPU_time: start_time = time.time()
    sample = np.array([algorithm(x0, steps=burn_in) for i in range(size)])
    if print_CPU_time:
        CPU_time = time.time() - start_time
        print("CPU time for %s: %.1f sec" %(algorithm.__name__, CPU_time))
    return sample

def draw_histogram_check(samples, title, bins=50, range=[-3, 3]):
    """Draw histogramm with rho over it."""
    count, bins, ignored = plt.hist(samples,
                                    bins=bins, density=True, range=range)
    plt.title(title)
    plt.plot(bins, rho(bins), color='r')
    plt.plot(bins, np.exp(-abs(bins)) / 2, color='b')
    plt.show()

def sample_and_draw_path(algorithm, title, x0, steps):
    """
    Simulate the algorithm given number of steps starting from x0 and
    draw the path of the first coordinate.
    """
    path = np.zeros((steps,))
    path[0] = x0[0]
    for i in range(1, steps):
        x0 = algorithm(x0, 1)
        path[i] = x0[0]
    plt.title(title)
    plt.plot(range(steps), path)
    plt.show()

def get_correlations(x0s, k_max, algorithm):
    d = len(x0s[0])
    N = len(x0s[:, 0])
    corr = np.zeros((k_max,))
    last_x = x0s
    for k in range(k_max):
        x_after_k_steps = np.zeros((N, d))
        for i in range(N):
            # OPTIMIZATION!!! save values and do always 1 step or (k_current - k_prev steps)
            x_after_k_steps[i] = algorithm(last_x[i], 1)

        corr[k] = np.corrcoef(x0s[:, 0], x_after_k_steps[:, 0])[0, 1]
        last_x = x_after_k_steps
    return corr

# %% set initial parameters
# dimension
d = 40
# starting vector
x0 = np.zeros((d,))
# number of skipped iterations at the beginning
burn_in = 10**3
# number of iterations
N = 10**3
# set full names of the algorithms
labels = {"SSS": "Simple slice sampler",
          "ESS": "Elliptical slice sampler",
          "MH" : "Metropolis-Hastings"}

# %% test algorithms
test_SSS = sample_wrt_algorithm(random_SSS, x0, burn_in, size=N)
test_ESS = sample_wrt_algorithm(random_ESS, x0, burn_in, size=N)
test_MH  = sample_wrt_algorithm(random_MH,  x0, burn_in, size=N)
# print("Mean acceptance rate =", np.mean(ACCEPTANCE_RATES))

# %% save the kernel state
dill.dump_session("ess_vs_ess_kernel.db")

# %% load the kernel state if needed
import dill
dill.load_session("ess_vs_ess_kernel.db")

# %% drawing one histogram of the first coordinates with the target density
values = [test_SSS[:, 0], test_ESS[:, 0], test_MH[:, 0]]
count, bins, ignored = plt.hist(values, bins=50, density=True, label=labels.values())
plt.legend(loc="best")
plt.plot(bins, rho(bins), color='r')
plt.show()

# %% drawing separate histograms of the first coordinates with the target density
draw_histogram_check(test_SSS[:, 0], labels["SSS"])
draw_histogram_check(test_ESS[:, 0], labels["ESS"])
draw_histogram_check(test_MH [:, 0], labels["MH"])

# %% simulating and drawing one path of the first coordinate of each algorithm
# sample_and_draw_path(random_SSS, labels["SSS"], x0, N)
# sample_and_draw_path(random_ESS, labels["ESS"], x0, N)
# sample_and_draw_path(random_MH,  labels["MH"],  x0, N)

# %% calculating correlations
k_max = 300
corr_SSS = get_correlations(test_SSS, k_max, random_SSS)
corr_ESS = get_correlations(test_ESS, k_max, random_ESS)
corr_MH  = get_correlations(test_MH,  k_max, random_MH)

# %% plot correlations
plt.plot(range(1, k_max + 1), corr_SSS)
plt.plot(range(1, k_max + 1), corr_ESS)
plt.plot(range(1, k_max + 1), corr_MH)
plt.xscale("log")
plt.legend(labels.values(), loc="best")
plt.show()
